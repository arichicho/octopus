#!/bin/bash

echo "üöÄ Iniciando Octopus en modo desarrollo..."

# Verificar si Node.js est√° instalado
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js no est√° instalado. Por favor instala Node.js primero."
    exit 1
fi

# Verificar si npm est√° instalado
if ! command -v npm &> /dev/null; then
    echo "‚ùå npm no est√° instalado. Por favor instala npm primero."
    exit 1
fi

# Verificar si Firebase CLI est√° instalado
if ! command -v firebase &> /dev/null; then
    echo "‚ö†Ô∏è  Firebase CLI no est√° instalado. Instalando..."
    npm install -g firebase-tools
fi

# Verificar si las dependencias est√°n instaladas
if [ ! -d "node_modules" ]; then
    echo "üì¶ Instalando dependencias..."
    npm install
fi

# Verificar si existe el archivo .env
if [ ! -f ".env.local" ]; then
    echo "‚ö†Ô∏è  Archivo .env.local no encontrado. Copiando desde .env.example..."
    if [ -f ".env.example" ]; then
        cp .env.example .env.local
        echo "‚úÖ Archivo .env.local creado. Por favor configura las variables de entorno."
    else
        echo "‚ùå Archivo .env.example no encontrado."
        exit 1
    fi
fi

echo "üî• Iniciando emuladores de Firebase..."
# Iniciar emuladores en segundo plano
firebase emulators:start --only auth,firestore,storage --import=./firebase-data --export-on-exit=./firebase-data &
FIREBASE_PID=$!

# Esperar un momento para que los emuladores se inicien
echo "‚è≥ Esperando que los emuladores se inicien..."
sleep 5

echo "üåê Iniciando servidor de desarrollo de Next.js..."
# Iniciar Next.js en modo desarrollo
npm run dev &
NEXT_PID=$!

echo "‚úÖ Octopus iniciado correctamente!"
echo ""
echo "üì± Aplicaci√≥n: http://localhost:3000"
echo "üî• Emuladores Firebase: http://localhost:4000"
echo "üìä Firestore UI: http://localhost:4000/firestore"
echo "üîê Auth UI: http://localhost:4000/auth"
echo ""
echo "üí° Para detener los servidores, presiona Ctrl+C"

# Funci√≥n para limpiar procesos al salir
cleanup() {
    echo ""
    echo "üõë Deteniendo servidores..."
    kill $FIREBASE_PID 2>/dev/null
    kill $NEXT_PID 2>/dev/null
    echo "‚úÖ Servidores detenidos."
    exit 0
}

# Capturar se√±al de interrupci√≥n
trap cleanup SIGINT SIGTERM

# Mantener el script ejecut√°ndose
wait
